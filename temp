pipeline {
    agent any

    environment {
        // specific variables to remove
        PATH = "/mnt/c/Users/vasyl/AppData/Local/Google/Cloud SDK/google-cloud-sdk/bin:$PATH"


        SERVICE_NAME = 'service2'
        PORT = '80'
        API_URL = "http://${SERVICE_NAME}:${PORT}"
        USER_CHOICE = ''
        itemId = '123'
        CURL_COMMAND = ''

        JOB_NAME = 'curl-job-organizations'
        ctx = '{"gke_clever-spirit-417020_europe-west1-d_microservices-cluster":"default"}'
    }

    stages {
        stage('User Input') {
            steps {
                script {
                    USER_CHOICE = input(
                        message: 'Choose an action',
                        ok: 'Ok',
                        parameters: [
                            choice(
                                name: 'Action',
                                choices: ['List organizations in whitelist', 'Add an organization to whitelist'],
                                description: 'Select whether to get organizations or add a new organization'
                            )
                        ]
                    )
                }
            }
        }

        stage('Call API') {
            steps {
                script {
                    if (USER_CHOICE == 'List organizations in whitelist') {
                        echo "Getting list of organizations"
                        env.curlCommand = "curl --max-time 20 -X GET ${env.API_URL}"
                    } else {
                        echo "Adding organization to the list of organizations"
                        env.curlCommand = """curl --max-time 20 -X POST -H \\\"Content-Type: application/json\\\" -d '{\\\"organizationId\\\": \\\"${env.itemId}\\\"}' ${env.API_URL}"""
                    }
                }
            }
        }

        stage('Prepare Kubernetes Job YAML') {
            steps {
                script {
                def ctx = readJSON text: env.ctx
                def namespace = ctx["${ENV}"]
                echo "Preparing job ${env.JOB_NAME} in namespace ${namespace}"
                def jobYaml = """
apiVersion: batch/v1
kind: Job
metadata:
  name: ${env.JOB_NAME}
  namespace: ${namespace}
spec:
  template:
    spec:
      containers:
      - name: curl-container
        image: curlimages/curl:latest
        command:
        - /bin/sh
        - -c
        - "${env.curlCommand}"
      restartPolicy: Never
"""
                    writeFile file: "${env.JOB_NAME}.yaml", text: jobYaml
                    echo "Kubernetes JOB YAML file is written to ${env.JOB_NAME}.yaml"
                    echo "${jobYaml}"
                }
            }
        }


        stage('Create Kubernetes Job') {
            steps {
                script {
                    if (fileExists("${env.JOB_NAME}.yaml")) {
                        echo "YAML file  ${env.JOB_NAME}.yaml is found. Trying to create a job ${env.JOB_NAME} in ${ENV}"
                        try {
                        // Apply the Kubernetes job manifest
                        sh(script: """
                            \$(which kubectl) --context ${ENV} apply -f  ${env.JOB_NAME}.yaml
                        """)

                        // Check the status of the job
                        def jobStatus = sh(
                            script: "\$(which kubectl) get job ${env.JOB_NAME} -o=jsonpath='{.status}'",
                            returnStdout: true
                        ).trim()

                        echo "Kubernetes job created successfully. Status: ${jobStatus}"
                    } catch (Exception e) {
                        // Handle any errors during job creation
                        error "Failed to create Kubernetes job: ${e.message}"
                    }
                    } else {
                        echo "YAML file  ${env.JOB_NAME}.yaml not found "
                    }
                    
                }
            }
        }


        stage('Check Job Status and Logs') {
            steps {
                script {
                    // Get job pod name
                    def podName = sh(script: "\$(which kubectl) --context ${ENV} get pods -l job-name=${env.JOB_NAME} -o jsonpath='{.items[0].metadata.name}'", returnStdout: true).trim()
                    echo "Getting job pod ${podName} logs"
                    def logs = sh(script: """
                    \$(which kubectl) --context ${ENV} wait --for=condition=Complete job/${env.JOB_NAME} --timeout=1m
                    \$(which kubectl) --context ${ENV}  logs ${podName}
                    """, returnStdout: true).trim()
                    echo "---------------- Response from service--------------------\n ${logs}"

                }
            }
        }
    }

    post {
        always {
            script {
                // Clean up resources
                echo "Clean up resources"
                    sh(script: """
                        # Check if job exists
                        if \$(which kubectl) --context ${ENV} get job ${env.JOB_NAME}  &>/dev/null; then
                            echo "Job ${env.JOB_NAME} exists in context ${ENV}. Deleting it..."
                            \$(which kubectl) --context ${ENV} delete job ${env.JOB_NAME}
                        else
                            echo "Job ${env.JOB_NAME} does not exist in context ${ENV}."
                        fi
                    """)
                echo "Pipeline completed."
            }
        }
    }
}
